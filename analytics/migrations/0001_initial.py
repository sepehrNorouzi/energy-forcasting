# Generated by Django 5.2.5 on 2025-08-11 11:16

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataProfilingReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_url', models.URLField(help_text='S3 URL of the generated HTML report', max_length=500)),
                ('countries', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, default=list, help_text='List of country codes included in the report', size=None)),
                ('start_date', models.DateTimeField(help_text='Start date of data analysis period')),
                ('end_date', models.DateTimeField(help_text='End date of data analysis period')),
                ('record_count', models.PositiveIntegerField(help_text='Number of records analyzed in the report')),
                ('report_type', models.CharField(default='minimal', help_text='Type of profiling report (minimal, full, explorative)', max_length=20)),
                ('generated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed')], default='completed', max_length=20)),
                ('file_size_mb', models.FloatField(blank=True, help_text='Report file size in MB', null=True)),
                ('generated_by', models.ForeignKey(blank=True, help_text='User who generated the report', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Profiling Report',
                'verbose_name_plural': 'Data Profiling Reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportGenerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('countries_requested', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, default=list, size=None)),
                ('start_date_requested', models.DateTimeField()),
                ('end_date_requested', models.DateTimeField()),
                ('report_type_requested', models.CharField(max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('in_progress', 'In Progress')], default='in_progress', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if generation failed')),
                ('data_extraction_seconds', models.FloatField(blank=True, null=True)),
                ('report_generation_seconds', models.FloatField(blank=True, null=True)),
                ('upload_seconds', models.FloatField(blank=True, null=True)),
                ('total_seconds', models.FloatField(blank=True, null=True)),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generation_logs', to='analytics.dataprofilingreport')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='DataQualityMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(help_text='Name of the data quality metric', max_length=100)),
                ('metric_category', models.CharField(help_text='Category of metric (completeness, consistency, validity, etc.)', max_length=50)),
                ('metric_value', models.FloatField(help_text='Numeric value of the metric')),
                ('metric_unit', models.CharField(blank=True, help_text='Unit of measurement (%, count, ratio, etc.)', max_length=20)),
                ('table_name', models.CharField(blank=True, help_text='Database table or dataset name', max_length=100)),
                ('column_name', models.CharField(blank=True, help_text='Specific column name if applicable', max_length=100)),
                ('threshold_value', models.FloatField(blank=True, help_text='Acceptable threshold for this metric', null=True)),
                ('is_within_threshold', models.BooleanField(default=True, help_text='Whether the metric value is within acceptable range')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_metrics', to='analytics.dataprofilingreport')),
            ],
            options={
                'ordering': ['metric_category', 'metric_name'],
                'unique_together': {('report', 'metric_name', 'table_name', 'column_name')},
            },
        ),
    ]
